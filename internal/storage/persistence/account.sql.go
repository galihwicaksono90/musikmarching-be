// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: account.sql

package persistence

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createAccount = `-- name: CreateAccount :one
WITH account_insert AS (
  INSERT INTO Account (email, name, pictureUrl, role_id)
  VALUES ($1, $2, $3, $4)
  RETURNING id
)
INSERT INTO Profile as p (account_id)
SELECT id FROM account_insert
returning account_id
`

type CreateAccountParams struct {
	Email      string      `db:"email" json:"email"`
	Name       string      `db:"name" json:"name"`
	Pictureurl pgtype.Text `db:"pictureurl" json:"pictureurl"`
	Roleid     uuid.UUID   `db:"roleid" json:"roleid"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createAccount,
		arg.Email,
		arg.Name,
		arg.Pictureurl,
		arg.Roleid,
	)
	var account_id uuid.UUID
	err := row.Scan(&account_id)
	return account_id, err
}

const createAccountOld = `-- name: CreateAccountOld :one
insert into account as a (email, name, pictureurl, role_id)
values ($1, $2, $3, $4)
returning id
`

type CreateAccountOldParams struct {
	Email      string      `db:"email" json:"email"`
	Name       string      `db:"name" json:"name"`
	Pictureurl pgtype.Text `db:"pictureurl" json:"pictureurl"`
	Roleid     uuid.UUID   `db:"roleid" json:"roleid"`
}

func (q *Queries) CreateAccountOld(ctx context.Context, arg CreateAccountOldParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createAccountOld,
		arg.Email,
		arg.Name,
		arg.Pictureurl,
		arg.Roleid,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getAccountByEmail = `-- name: GetAccountByEmail :one
select 
  a.id,
  a.name,
  a.email,
  a.pictureurl,
  r.name as role_name,
  p.account_id
from account as a
inner join role as r on a.role_id = r.id
inner join profile as p on a.id = p.account_id
where a.email = $1
limit 1
`

type GetAccountByEmailRow struct {
	ID         uuid.UUID   `db:"id" json:"id"`
	Name       string      `db:"name" json:"name"`
	Email      string      `db:"email" json:"email"`
	Pictureurl pgtype.Text `db:"pictureurl" json:"pictureurl"`
	RoleName   Rolename    `db:"role_name" json:"role_name"`
	AccountID  uuid.UUID   `db:"account_id" json:"account_id"`
}

func (q *Queries) GetAccountByEmail(ctx context.Context, email string) (GetAccountByEmailRow, error) {
	row := q.db.QueryRow(ctx, getAccountByEmail, email)
	var i GetAccountByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Pictureurl,
		&i.RoleName,
		&i.AccountID,
	)
	return i, err
}

const getAccountById = `-- name: GetAccountById :one
select 
  a.id,
  a.name,
  a.email,
  a.pictureurl,
  r.name as role_name,
  p.account_id
from account as a
inner join role as r on a.role_id = r.id
inner join profile as p on a.id = p.account_id
where a.id = $1
limit 1
`

type GetAccountByIdRow struct {
	ID         uuid.UUID   `db:"id" json:"id"`
	Name       string      `db:"name" json:"name"`
	Email      string      `db:"email" json:"email"`
	Pictureurl pgtype.Text `db:"pictureurl" json:"pictureurl"`
	RoleName   Rolename    `db:"role_name" json:"role_name"`
	AccountID  uuid.UUID   `db:"account_id" json:"account_id"`
}

func (q *Queries) GetAccountById(ctx context.Context, id uuid.UUID) (GetAccountByIdRow, error) {
	row := q.db.QueryRow(ctx, getAccountById, id)
	var i GetAccountByIdRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Pictureurl,
		&i.RoleName,
		&i.AccountID,
	)
	return i, err
}

const getAccounts = `-- name: GetAccounts :many
select 
  a.id,
  a.name,
  a.email,
  a.pictureurl,
  r.name as role_name,
  p.account_id
from account as a
inner join role as r on a.role_id = r.id
inner join profile as p on a.id = p.account_id
`

type GetAccountsRow struct {
	ID         uuid.UUID   `db:"id" json:"id"`
	Name       string      `db:"name" json:"name"`
	Email      string      `db:"email" json:"email"`
	Pictureurl pgtype.Text `db:"pictureurl" json:"pictureurl"`
	RoleName   Rolename    `db:"role_name" json:"role_name"`
	AccountID  uuid.UUID   `db:"account_id" json:"account_id"`
}

func (q *Queries) GetAccounts(ctx context.Context) ([]GetAccountsRow, error) {
	rows, err := q.db.Query(ctx, getAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAccountsRow{}
	for rows.Next() {
		var i GetAccountsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Pictureurl,
			&i.RoleName,
			&i.AccountID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
update account as a
set 
  name = coalesce($1, a.name),
  pictureurl = coalesce($2, a.pictureurl)
where id = $3
returning id
`

type UpdateAccountParams struct {
	Name       pgtype.Text `db:"name" json:"name"`
	Pictureurl pgtype.Text `db:"pictureurl" json:"pictureurl"`
	ID         uuid.UUID   `db:"id" json:"id"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, updateAccount, arg.Name, arg.Pictureurl, arg.ID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
