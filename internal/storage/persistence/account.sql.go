// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: account.sql

package persistence

import (
	"context"

	"github.com/google/uuid"
)

const getAccountByEmail = `-- name: GetAccountByEmail :one
select id, name, email, created_at, updated_at, deleted_at
from account
where email = $1
`

func (q *Queries) GetAccountByEmail(ctx context.Context, email string) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountByEmail, email)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getAccountById = `-- name: GetAccountById :one
select id, name, email, created_at, updated_at, deleted_at
from account
where id = $1
`

func (q *Queries) GetAccountById(ctx context.Context, id uuid.UUID) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountById, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getAccounts = `-- name: GetAccounts :many
select id, name, email, created_at, updated_at, deleted_at
from account
`

func (q *Queries) GetAccounts(ctx context.Context) ([]Account, error) {
	rows, err := q.db.Query(ctx, getAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertAccount = `-- name: UpsertAccount :one
insert into account (email, name)
values ($1, $2)
on conflict (email) do update
set name = $2
returning id
`

type UpsertAccountParams struct {
	Email string `db:"email" json:"email"`
	Name  string `db:"name" json:"name"`
}

func (q *Queries) UpsertAccount(ctx context.Context, arg UpsertAccountParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, upsertAccount, arg.Email, arg.Name)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
