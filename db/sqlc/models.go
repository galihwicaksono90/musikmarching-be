// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type Roletype string

const (
	RoletypeAdmin       Roletype = "admin"
	RoletypeUser        Roletype = "user"
	RoletypeContributor Roletype = "contributor"
)

func (e *Roletype) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Roletype(s)
	case string:
		*e = Roletype(s)
	default:
		return fmt.Errorf("unsupported scan type for Roletype: %T", src)
	}
	return nil
}

type NullRoletype struct {
	Roletype Roletype `json:"roletype"`
	Valid    bool     `json:"valid"` // Valid is true if Roletype is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRoletype) Scan(value interface{}) error {
	if value == nil {
		ns.Roletype, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Roletype.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRoletype) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Roletype), nil
}

type Role struct {
	ID        uuid.UUID          `json:"id"`
	Name      Roletype           `json:"name"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	DeletedAt pgtype.Timestamptz `json:"deleted_at"`
}

type Score struct {
	ID           uuid.UUID          `json:"id"`
	Title        string             `json:"title"`
	Author       string             `json:"author"`
	Uploadedbyid uuid.UUID          `json:"uploadedbyid"`
	Scoretype    string             `json:"scoretype"`
	CreatedAt    time.Time          `json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
	DeletedAt    pgtype.Timestamptz `json:"deleted_at"`
	Verifiedbyid pgtype.UUID        `json:"verifiedbyid"`
}

type Useraccount struct {
	ID        uuid.UUID          `json:"id"`
	Name      string             `json:"name"`
	Email     string             `json:"email"`
	Roleid    uuid.UUID          `json:"roleid"`
	Password  pgtype.Text        `json:"password"`
	CreatedAt time.Time          `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	DeletedAt pgtype.Timestamptz `json:"deleted_at"`
}
