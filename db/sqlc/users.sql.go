// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
insert into UserAccount (
  name, email, password, roleId
) values (
  $1, $2, $3, $4
) returning id, name, email, created_at
`

type CreateUserParams struct {
	Name     string      `json:"name"`
	Email    string      `json:"email"`
	Password pgtype.Text `json:"password"`
	Roleid   uuid.UUID   `json:"roleid"`
}

type CreateUserRow struct {
	ID        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	Email     string    `json:"email"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.Roleid,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const findUserByEmail = `-- name: FindUserByEmail :one
select u.id, u.name, u.email, u.created_at, u.password, r.name as rolename
from useraccount as u
inner join role as r on u.roleid = r.id
where u.email = $1
limit 1
`

type FindUserByEmailRow struct {
	ID        uuid.UUID   `json:"id"`
	Name      string      `json:"name"`
	Email     string      `json:"email"`
	CreatedAt time.Time   `json:"created_at"`
	Password  pgtype.Text `json:"password"`
	Rolename  Roletype    `json:"rolename"`
}

func (q *Queries) FindUserByEmail(ctx context.Context, email string) (FindUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, findUserByEmail, email)
	var i FindUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
		&i.Password,
		&i.Rolename,
	)
	return i, err
}

const findUsers = `-- name: FindUsers :many
select u.id, u.name, u.email, u.created_at, r.name as rolename
from useraccount as u
inner join role as r on u.roleid = r.id
limit 10
`

type FindUsersRow struct {
	ID        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	Email     string    `json:"email"`
	CreatedAt time.Time `json:"created_at"`
	Rolename  Roletype  `json:"rolename"`
}

func (q *Queries) FindUsers(ctx context.Context) ([]FindUsersRow, error) {
	rows, err := q.db.Query(ctx, findUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindUsersRow{}
	for rows.Next() {
		var i FindUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.CreatedAt,
			&i.Rolename,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
